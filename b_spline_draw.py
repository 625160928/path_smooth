import matplotlib.pyplot as plt
import numpy as np
from mpmath import diff
# from  circle_line_method_parallel import  draw_px
# 计算基函数，i为控制顶点序号，k为次数，u为代入的值，NodeVector为节点向量
# 该函数返回第i+1个k次基函数在u处的值


def b_spline_basis(i, k, u, nodeVector):
    # nodeVector = np.mat(nodeVector)  # 将输入的节点转化成能够计算的数组
    # k=0时，定义一次基函数
    if k == 0:
        if (nodeVector[i] < u) & (u <= nodeVector[i + 1]):  # 若u在两个节点之间，函数之为1，否则为0
            result = 1
        else:
            result = 0
    else:
        # 计算支撑区间长度
        length1 = nodeVector[i + k] - nodeVector[i]
        length2 = nodeVector[i + k + 1] - nodeVector[i + 1]
        # 定义基函数中的两个系数
        if length1 == 0:  # 特别定义 0/0 = 0
            alpha = 0
        else:
            alpha = (u - nodeVector[i]) / length1
        if length2 == 0:
            beta = 0
        else:
            beta = (nodeVector[i + k + 1] - u) / length2
    # 递归定义
        result = alpha * b_spline_basis(i, k - 1, u, nodeVector) + beta * b_spline_basis(i + 1, k - 1, u, nodeVector)
    return result


# 画B样条函数图像
def draw_b_spline(n,k,nodeVector,X,Y):
    plt.figure()
    # draw_px()
    basis_i = np.zeros(100)  # 存放第i个基函数
    rx = np.zeros(100)  # 存放B样条的横坐标
    ry = np.zeros(100)
    for i in range(n + 1):  # 计算第i个B样条基函数，
        U = np.linspace(nodeVector[k], nodeVector[n+1], 100)  # 在节点向量收尾之间取100个点，u在这些点中取值
        j = 0
        for u in U:
            nodeVector = np.array(nodeVector)
            basis_i[j] = b_spline_basis(i, k, u, nodeVector)  # 计算取u时的基函数的值
            j = j + 1
        rx = rx + X[i] * basis_i
        ry = ry + Y[i] * basis_i
        # plt.plot(U,basis_i)
        # print(basis_i)
    # print(rx)
    # print(ry)
    plt.plot(X,Y)
    plt.plot(rx, ry)
    plt.show()
    return rx,ry


if __name__ == '__main__':
    n = 7
    k = 3
    nodeVector = [0, 0,1, 1,2, 2, 3, 4, 5, 5, 5, 5]
    X = [0, 2, 2, 3, 4, 5, 6, 7]
    Y = [0, 3, 1, 3, 1, 4, 0, 5]


    # x1= [8.049999999999999, 8.102999116671082, 8.155992933474662, 8.208976151073223, 8.261943471189156, 8.31488959713459, 8.367809234341049, 8.420697090888915, 8.473547878036605, 8.526356310749447, 8.579117108228179, 8.631824994437014, 8.68447469863126, 8.737060955884369, 8.789578507614438, 8.84202210211006, 8.894386495055485, 8.94666645005506, 8.998856739156848, 9.050952143375431, 9.102947453213801, 9.154837469184304, 9.206617002328583, 9.258280874736473, 9.309823920063787, 9.361240984048944, 9.412526925028393, 9.463676614450776, 9.514684937389772, 9.565546793055596, 9.616257095305066, 9.666810773150218, 9.71720277126539, 9.767428050492766, 9.81748158834628, 9.867358379513854, 9.91705343635794, 9.966561789414259, 10.015878487888768, 10.064998600152714, 10.113917214235805, 10.1626294383174, 10.211130401215678, 10.259415252874772, 10.307479164849752, 10.355317330789473, 10.402924966917208, 10.597101575231209, 10.754454553169062, 10.91256947930199, 11.07143054226915, 11.231021856096636, 11.391327461786048, 11.552331328910405, 11.714017357217168, 11.876369378238241, 12.039371156906817, 12.203006393180862, 12.367258723673112, 12.532111723287393, 12.697548906861122, 12.863553730813802, 13.030109594801381, 13.19719984337625, 13.364807767652799, 13.532916606978265, 13.701509550608815, 13.870569739390572, 14.040080267445546, 14.210024183862185, 14.380384494390473, 14.551144163141318, 14.722286114290146, 14.89379323378446, 15.065648371055236, 15.237834340731952, 15.410333924361135, 15.583129872128167, 15.756204904582269, 15.929541714364424, 16.103122967938102, 16.27693130732259, 16.4509493518288, 16.62515969979729, 16.79954493033844, 16.97408760507451, 17.14877026988348, 17.32357545664445, 17.498485684984395, 17.673483464026255, 17.84855129413795, 18.023671668682354, 18.198827075767955, 18.374]
    # y1=[-0.8499999999999996, -0.8497350022083259, -0.8489400353328618, -0.847615178869634, -0.8457605653031832, -0.8433763800933214, -0.8404628616565821, -0.837020301342382, -0.8330490434038831, -0.8285494849635704, -0.8235220759735373, -0.8179673191704948, -0.8118857700254924, -0.805278036688378, -0.7981447799269787, -0.7904867130610267, -0.7823046018908251, -0.7735992646206746, -0.7643715717770467, -0.7546224461215365, -0.7443528625585847, -0.7335638480379911, -0.7222564814522139, -0.7104318935284928, -0.698091266715763, -0.6852358350664245, -0.6718668841129274, -0.6579857507392273, -0.6435938230470946, -0.6286925402173038, -0.6132833923657222, -0.5973679203942917, -0.580947715836948, -0.5640244207004628, -0.5465997273002481, -0.5286753780911218, -0.5102531654930686, -0.4913349317119975, -0.47192256855552017, -0.452018017243776, -0.4316232682153087, -0.4107403609280258, -0.38937138365525303, -0.36751847327691145, -0.34518381506582685, -0.3223696424692104, -0.29907823688530755, -0.20171981178401488, -0.12473695090110404, -0.04933144268317946, 0.024489172381780833, 0.09671751229378955, 0.1673463542790401, 0.23636863551219278, 0.30377745382264365, 0.36956606838473505, 0.43372790039183684, 0.4962565337142095, 0.557145715540635, 0.6163893570036691, 0.6739815337885311, 0.7299164867255428, 0.7841886223660168, 0.8367925135416172, 0.8877228999070645, 0.9369746884661652, 0.9845429540811033, 1.0304229399649607, 1.0746100581573792, 1.1170998899833613, 1.1578881864951356, 1.1969708688970435, 1.2343440289534051, 1.2700039293793637, 1.3039470042145922, 1.336169859179897, 1.366669272016626, 1.3954421928089182, 1.4224857442886716, 1.4477972221232704, 1.4713740951860288, 1.4932140058092855, 1.5133147700201732, 1.5316743777590283, 1.5482909930803785, 1.56316295433653, 1.5762887743437553, 1.5876671405309928, 1.5972969150711016, 1.6051771349946584, 1.6113070122862325, 1.6156859339632064, 1.6183134621370598, 1.6191893340571646]

    for i in range(len(nodeVector)):
        nodeVector[i] = nodeVector[i] / 10
    for i in range(len(X)):
        X[i]= X[i]/10
    for i in range(len(Y)):
        Y[i]= Y[i]/10

    draw_b_spline(n,k,nodeVector,X,Y)


    print(type(X[0]),type(Y[0]),type(nodeVector[0]))
